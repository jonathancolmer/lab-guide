#  The pipe (`%>%`) sends the output of one step into the next.
mtcars_2 <- mtcars %>%
group_by(cyl) %>%                     # split rows by the 'cyl' column
summarize(
avg_mpg = mean(mpg),                # compute mean of mpg
avg_hp  = mean(hp),                 # compute mean of hp
count   = n(),                      # count rows in each group
.groups = "drop"                    # drop grouping after summarizing
)
# 2. Make a simple lookup table that matches each `cyl` value to a text label.
#    We use `tibble()` to create a small data frame by hand.
cyl_labels <- tibble(
cyl       = c(4, 6, 8),
cyl_label = c("Four Cylinder", "Six Cylinder", "Eight Cylinder")
)
# ─── 1. Inner join (base R) ───────────────────────────────────────────────────
# Use `merge()` to keep only rows where `cyl` appears in both tables.
merged_inner_join <- merge(
x  = mtcars_2,                        # left table
y  = cyl_labels,                      # right table
by = "cyl"                            # match rows based on this column
)
print(merged_inner_join)
# ─── 2. Left join (base R) ────────────────────────────────────────────────────
# Keeps every row from `mtcars_2`; adds `cyl_label` where it matches, if there
# is no match, fills in NA.
merged_left_join <- merge(
x     = mtcars_2,
y     = cyl_labels,
by    = "cyl",                        # match rows based on this column
all.x = TRUE                          # TRUE means “keep all rows from x”
)
print(merged_left_join)
# ─── 3. Left join (dplyr) ─────────────────────────────────────────────────────
# Performs the same left join but with clearer syntax and original row order:
left_joined <- left_join(
x  = mtcars_2,
y  = cyl_labels,
by = "cyl"
)
print(left_joined)
# ─── 4. Column-bind (cbind) ───────────────────────────────────────────────────
# Cbind() only works if the data sets already have the same order.
# First, sort both by `cyl` to order rows from lowest to highest `cyl` value.
mtcars_2_sorted   <- arrange(mtcars_2, cyl)
cyl_labels_sorted <- arrange(cyl_labels, cyl)
columns_binded <- cbind(
mtcars_2_sorted,
cyl_labels_sorted["cyl_label"]       # Select the column to add to mtcars_2
)
print(columns_binded)
# 3. Build a lookup of every (cyl, gear) combination and give it a label
cyl_gear_labels <- mtcars_2 %>%
distinct(cyl, gear) %>%              # find unique cyl/gear pairs
mutate(
cyl_gear_label = paste0(cyl, "-cyl / ", gear, "-gear") # make a text label
)
# 1. Create `mtcars_2` by taking the built-in `mtcars` and computing, for each engine size:
#    - avg_mpg: average miles per gallon
#    - avg_hp : average horsepower
#    - count  : number of cars in that group
#  The pipe (`%>%`) sends the output of one step into the next.
mtcars_2 <- mtcars %>%
group_by(cyl) %>%                     # split rows by the 'cyl' column
summarize(
avg_mpg = mean(mpg),                # compute mean of mpg
avg_hp  = mean(hp),                 # compute mean of hp
count   = n(),                      # count rows in each group
.groups = "drop"                    # drop grouping after summarizing
)
# 2. Make a simple lookup table that matches each `cyl` value to a text label.
#    We use `tibble()` to create a small data frame by hand.
cyl_labels <- tibble(
cyl       = c(4, 6, 8),
cyl_label = c("Four Cylinder", "Six Cylinder", "Eight Cylinder")
)
# 3. Build a lookup of every (cyl, gear) combination and give it a label
cyl_gear_labels <- mtcars_2 %>%
distinct(cyl, gear) %>%              # find unique cyl/gear pairs
mutate(
cyl_gear_label = paste0(cyl, "-cyl / ", gear, "-gear") # make a text label
)
# 3. Build a lookup of every (cyl, gear) combination and give it a label
cyl_gear_labels <- mtcars %>%
distinct(cyl, gear) %>%              # find unique cyl/gear pairs
mutate(
cyl_gear_label = paste0(cyl, "-cyl / ", gear, "-gear") # make a text label
)
# ─── 1. Inner join (base R) ───────────────────────────────────────────────────
# Use `merge()` to keep only rows where `cyl` appears in both tables.
merged_inner_join <- merge(
x  = mtcars_2,                        # left table
y  = cyl_labels,                      # right table
by = "cyl"                            # match rows based on this column
)
print(merged_inner_join)
# ─── 2. Left join (base R) ────────────────────────────────────────────────────
# Keeps every row from `mtcars_2`; adds `cyl_label` where it matches, if there
# is no match, fills in NA.
merged_left_join <- merge(
x     = mtcars_2,
y     = cyl_labels,
by    = "cyl",                        # match rows based on this column
all.x = TRUE                          # TRUE means “keep all rows from x”
)
# ─── 2. Left join (base R) ────────────────────────────────────────────────────
# Keeps every row from `mtcars_2`; adds `cyl_label` where it matches, if there
# is no match, fills in NA. Add a second argument to join the data, matching
# rows where both cylinder and gear information match.
merged_left_join <- merge(
x     = mtcars_2,
y     = cyl_gear_labels,
by    = "cyl", "gear",                # match rows based on both columns
all.x = TRUE                          # TRUE means “keep all rows from x”
)
# ─── 2. Left join (base R) ────────────────────────────────────────────────────
# Keeps every row from `mtcars_2`; adds `cyl_label` where it matches, if there
# is no match, fills in NA. Add a second argument to join the data, matching
# rows where both cylinder and gear information match.
merged_left_join <- merge(
x     = mtcars_2,
y     = cyl_gear_labels,
by    = c("cyl", "gear"),  # match rows on both cyl AND gear
all.x = TRUE               # TRUE means “keep all rows from x”
)
# ─── 3. Left join (dplyr) ─────────────────────────────────────────────────────
# Performs the same left join but with clearer syntax and original row order:
left_joined <- left_join(
x  = mtcars,
y  = cyl_labels,
by = "cyl"                          # If you want to match based on a combination of keys (ie. ), add multip
)
# ─── 2. Left join (base R) ────────────────────────────────────────────────────
# Keeps every row from `mtcars_2`; adds `cyl_label` where it matches, if there
# is no match, fills in NA. Add a second argument to join the data, matching
# rows where both cylinder and gear information match.
merged_left_join <- merge(
x     = mtcars,
y     = cyl_gear_labels,
by    = c("cyl", "gear"),  # match rows on both cyl AND gear
all.x = TRUE               # TRUE means “keep all rows from x”
)
library(tidyverse)
# 1. Create `mtcars_2` by taking the built-in `mtcars` and computing, for each
#    engine size:
#    - avg_mpg: average miles per gallon
#    - avg_hp : average horsepower
#    - count  : number of cars in that group
#  The pipe (`%>%`) sends the output of one step into the next.
mtcars_2 <- mtcars %>%
group_by(cyl) %>%                     # split rows by the 'cyl' column
summarize(
avg_mpg = mean(mpg),                # compute mean of mpg
avg_hp  = mean(hp),                 # compute mean of hp
count   = n(),                      # count rows in each group
.groups = "drop"                    # drop grouping after summarizing
)
# 2. Make a simple lookup table that matches each `cyl` value to a text label.
#    We use `tibble()` to create a small data frame by hand.
cyl_labels <- tibble(
cyl       = c(4, 6, 8),
cyl_label = c("Four Cylinder", "Six Cylinder", "Eight Cylinder")
)
# 3. Build a lookup of every (cyl, gear) combination and give it a label
cyl_gear_labels <- mtcars %>%
distinct(cyl, gear) %>%              # find unique cyl/gear pairs
mutate(
cyl_gear_label = paste0(cyl, "-cyl / ", gear, "-gear") # make a text label
)
# ─── 1. Inner join (base R) ───────────────────────────────────────────────────
# Use `merge()` to keep only rows where `cyl` appears in both tables.
merged_inner_join <- merge(
x  = mtcars_2,                        # left table
y  = cyl_labels,                      # right table
by = "cyl"                            # match rows based on this column
)
# ─── 1. Inner join (base R) ───────────────────────────────────────────────────
# Use `merge()` to keep only rows where `cyl` appears in both tables.
baseR_inner_join <- merge(
x  = mtcars_2,                        # left table
y  = cyl_labels,                      # right table
by = "cyl"                            # match rows based on this column
)
print(merged_inner_join)
# ─── 2. Left join (base R) ────────────────────────────────────────────────────
# Keeps every row from `mtcars_2`; adds `cyl_label` where it matches, if there
# is no match, fills in NA. Add a second argument to join the data, matching
# rows where both cylinder and gear information match.
baseR_left_join <- merge(
x     = mtcars,
y     = cyl_gear_labels,
by    = c("cyl", "gear"),  # match rows on both cyl AND gear
all.x = TRUE               # TRUE means “keep all rows from x”
)
# ─── 3. Left join (dplyr) ─────────────────────────────────────────────────────
# Performs the same left join but with clearer syntax and original row order:
dplyr_left_joined <- left_join(
x  = mtcars,
y  = cyl_gear_labels,
by = "cyl", "gear"
)
print(left_joined)
columns_binded <- cbind(
mtcars_2_sorted,
cyl_labels_sorted["cyl_label"]       # Select the column to add to mtcars_2
)
# ─── 4. Column-bind (cbind) ───────────────────────────────────────────────────
# Cbind() only works if the data sets already have the same order.
# First, sort both by `cyl` to order rows from lowest to highest `cyl` value.
mtcars_2_sorted   <- arrange(mtcars_2, cyl)
cyl_labels_sorted <- arrange(cyl_labels, cyl)
columns_binded <- cbind(
mtcars_2_sorted,
cyl_labels_sorted["cyl_label"]       # Select the column to add to mtcars_2
)
print(columns_binded)
# Load tidyverse
library(tidyverse)
# Use mtcars and split it into two pieces by row number:
dataset1 <- mtcars[1:16, ]   # rows 1–16
dataset2 <- mtcars[17:32, ]  # rows 17–32
# Bind  2 rows of two datasets (dataset1 and dataset2)
# with identical variable names using rbind()
appended_datasets <- rbind(dataset1, dataset2)
# Specify the path to the folder containing your dataset files.
# Replace "your/directory/path" with the actual path to the folder.
folder_path <- "your/directory/path"
# Load your dataset (we will use the built-in mtcars dataset as an example)
dataset <- mtcars
# Using dplyr (tidyverse approach):
# dplyr::filter() selects rows that meet the specified condition.
dataset_v2 <- dataset %>%
dplyr::filter(cyl == 6 & gear != 3 | is.na(variable4) == TRUE)
# Using dplyr (tidyverse approach):
# dplyr::filter() selects rows that meet the specified condition.
dataset_v2 <- dataset %>%
dplyr::filter(cyl == 6 & gear != 3 | is.na(carb) == TRUE)
# With dplyr
col_filtered_dataset1 <- dataset%>%
dplyr::select(mpg, wt)
print(dataset)
# With dplyr
col_filtered_dataset1 <- dataset%>%
dplyr::select(mpg, wt)
print(col_filtered_dataset1)
# With conventional code
col_filtered_dataset2 <- dataset[, c("mpg", "wt")]
print(col_filtered_dataset2)
# Alternatively, you can select to keep columns by their number
# This code keeps column numbers 1 and 2
# The colon means "through"
col_filtered_dataset3 <- dataset[, 1:2]
print(col_filtered_dataset3)
# Using dplyr (tidyverse approach):
# dplyr::filter() selects rows that meet the specified condition.
filtered_dataset_1 <- dataset %>%
dplyr::filter(cyl == 6 & gear != 3 | is.na(carb) == TRUE)
print(filtered_dataset_2)
# Using dplyr (tidyverse approach):
# dplyr::filter() selects rows that meet the specified condition.
filtered_dataset_1 <- dataset %>%
dplyr::filter(cyl == 6 & gear != 3 | is.na(carb) == TRUE)
print(filtered_dataset_1)
# Alternatively, using base R indexing:
# The dataset[...] syntax selects rows based on the logical condition provided.
# Here, the expression inside the square brackets returns TRUE if the
# criteria is met, and FALSE if the criteria is not, and keeps the row
# in the dataset only when the expression returns TRUE.
filtered_dataset_2 <- dataset[
(dataset$cyl == 6 & dataset$gear != 3) |
is.na(dataset$carb) == TRUE,
]
print(filtered_dataset_2)
# Load your data (replace the file path with the path to your own code)
data <- iris
# Load your data (replace the file path with the path to your own code)
data <- iris
# Create a histogram of 'variable' from the 'data' dataset
ggplot(data, aes(x = 'petal length')) +
geom_histogram(
binwidth = 0.2,    # Set the width of each histogram bin to 5 units
fill = "blue",     # Fill the bars with blue color
color = "black"    # Outline the bars with black
) +
labs(
title = "Histogram of Variable",  # Title of the histogram
x = "Value",                      # Label for the x-axis
y = "Frequency"                   # Label for the y-axis
)
library(ggplot2)
# Load your data (replace the file path with the path to your own code)
data <- iris
# Create a histogram of 'variable' from the 'data' dataset
ggplot(data, aes(x = 'petal length')) +
geom_histogram(
binwidth = 0.2,    # Set the width of each histogram bin to 5 units
fill = "blue",     # Fill the bars with blue color
color = "black"    # Outline the bars with black
) +
labs(
title = "Histogram of Variable",  # Title of the histogram
x = "Value",                      # Label for the x-axis
y = "Frequency"                   # Label for the y-axis
)
# Create a histogram of 'variable' from the 'data' dataset
ggplot(data, aes(x = 'petal length')) +
geom_histogram(
binwidth = 1,    # Set the width of each histogram bin to 5 units
fill = "blue",     # Fill the bars with blue color
color = "black"    # Outline the bars with black
) +
labs(
title = "Histogram of Variable",  # Title of the histogram
x = "Value",                      # Label for the x-axis
y = "Frequency"                   # Label for the y-axis
)
# Create a histogram of 'variable' from the 'data' dataset
ggplot(data, aes(x = 'Petal.Length')) +
geom_histogram(
binwidth = 1,    # Set the width of each histogram bin to 5 units
fill = "blue",     # Fill the bars with blue color
color = "black"    # Outline the bars with black
) +
labs(
title = "Histogram of Variable",  # Title of the histogram
x = "Value",                      # Label for the x-axis
y = "Frequency"                   # Label for the y-axis
)
# Create a histogram of 'variable' from the 'data' dataset
ggplot(iris, aes(x = Petal.Length)) +
geom_histogram(
binwidth = 0.3,        # Sets the
fill     = "skyblue",  # nicer blue fill
color    = "black"     # black outlines
) +
labs(
title = "Distribution of Iris Petal Length",
x     = "Petal Length (cm)",
y     = "Count"
) +
theme_minimal()          # clean, minimal theme
# Load your dataset
data <- iris
# Create a line graph using ggplot2 with your dataset
ggplot(data, aes(x = Petal.Length, y = Petal.Width)) +
geom_line(color = "skyblue") +      # Draw a blue line connecting the data points
labs(
title = "Petal Length vs. Width",          # Set the plot title
x = "Petal Length (cm)",                   # Label for the x-axis
y = "Petal Width (cm)"                     # Label for the y-axis
)
# Create a line graph using ggplot2 with your dataset
ggplot(data, aes(x = Petal.Length, y = Petal.Width)) +
geom_line(color = "black") +      # Draw a blue line connecting the data points
labs(
title = "Petal Length vs. Width",          # Set the plot title
x = "Petal Length (cm)",                   # Label for the x-axis
y = "Petal Width (cm)"                     # Label for the y-axis
)
# Load data
dataset <- mtcars
#Conventional code
dataset$new_variable <- 1
# Conventional code
dataset$new_variable <- 1
#Dplyr code
dataset <- dataset %>%
dplyr::mutate(new_variable=1)
library(tidyverse)
# Load data. This code uses the built-in dataset mtcars
dataset <- mtcars
# Conventional code
dataset$new_variable <- 1
#Dplyr code
dataset <- dataset %>%
dplyr::mutate(new_variable=1)
print(dataset)
# Load data. This code uses the built-in dataset mtcars
dataset <- mtcars
# Conventional code - creates the column "new_variable" and enters 1 every row
dataset$new_variable <- 1
print(dataset)
#Dplyr code
dataset_2 <- dataset %>%
dplyr::mutate(new_variable=1)
print(dataset_2)
#Dplyr code
dataset_2 <- dataset %>%
dplyr::mutate(new_variable=2) # if new_variable already exists, this overwrites it
print(dataset_2)
dataset <- dataset %>%
dplyr::mutate(variable1_numeric = as.numeric(variable1),
variable2_character = as.character(variable2))
iris <- iris
# If you want to convert one type of data to another, use the as.numeric() or
# as.character() or similar commands. Insert the variable that you want to
# change as the parameter, and the function will convert it to the data type
# specified in the function title.
dataset <- dataset %>%
dplyr::mutate(carb_character = as.character(carb))
print(dataset)
# If you want to convert one type of data to another, use the as.numeric() or
# as.character() or similar commands. Insert the variable that you want to
# change as the parameter, and the function will convert it to the data type
# specified in the function title.
dataset <- dataset %>%
dplyr::mutate(carb = as.character(carb))
print(dataset)
# Extract a certain sequence of characters from a character string and saves
# as a new column in the dataset. This code extracts the characters from
# position 4 to position 8 of the complete character string.
dataset$character_snippet <- substr(dataset$character_complete, 4, 8)
#Dplyr code
dataset_2 <- dataset %>%
dplyr::mutate(new_variable= "cool_cars") # if new_variable already exists, this overwrites it
print(dataset_2)
# Extract a certain sequence of characters from a character string and saves
# as a new column in the dataset. This code extracts the characters from
# position 4 to position 8 of the complete character string.
dataset_2$character_snippet <- substr(dataset_2$new_variable, 4, 8)
print(dataset_2)
# If/else statements
# "If both numeric1 and numeric2 are not missing, then calculate their
# their difference and store it in the "difference" variable. Otherwise
# store NA in the "difference" variable."
dataset_4 <- dataset %>%
dplyr::mutate(
difference = ifelse(!is.na(gear) & !is.na(am),
gear - am,   # Calculate the difference when both values exist.
NA)                    # Otherwise, assign NA.
)
# If/else statements
# "If both numeric1 and numeric2 are not missing, then calculate their
# their difference and store it in the "difference" variable. Otherwise
# store NA in the "difference" variable."
dataset_4 <- dataset %>%
dplyr::mutate(
difference = ifelse(!is.na(gear) & !is.na(am),
gear - am,   # Calculate the difference when both values exist.
NA)                    # Otherwise, assign NA.
)
print(dataset_4)
# Create a variable whose name and value depend on the loop argument
# This can be helpful for reading or saving files in a folder.
character_list <- c("one", "two", "three")
for(c in character_list){
# Creates variables with names "variable_one", "variable_two",
# "variable_three" with values "one", "two", and "three"
# Quotations do not show up in the cell values
dataset[[paste0("variable_", c)]] <- c  # Appends "variable_" and value in c
}
print(dataset)
# Install fixedest package (if not installed already):
install.packages("fixest")
# Load fixedest
library(fixest)
# Use the built-in mtcars dataset with mpg as the outcome variable.
# -----------------------------
# 1. Simple Linear Regression
# -----------------------------
# Regress mpg on wt (weight) and hp (horsepower)
model1 <- feols(mpg ~ wt + hp, data = mtcars)
# Use the built-in mtcars dataset with mpg as the outcome variable.
# -----------------------------
# 1. Simple Linear Regression
# -----------------------------
# Regress mpg on wt (weight) and hp (horsepower)
model1 <- feols(mpg ~ wt + hp, data = mtcars)
summary(model1) # Displays regression results
model2 <- feols(mpg ~ 1, data = mtcars)
summary(model2)
# Extract the coefficients from model1 (which includes the coefficients for both
# 'wt' and 'hp' obtained from the simple linear regression)
coefs <- coef(model1)
# Calculate the linear combination: coefficient on 'wt' + 2 * coefficient on 'hp'
lin_comb <- coefs["wt"] + 2 * coefs["hp"]
cat("Linear combination (wt + 2*hp):", lin_comb, "\n") # Print the result
# Load your data. Here, we use R's built-in mtcars dataset.
data <- mtcars
library(ggplot2)
# Load your data. Here, we use R's built-in mtcars dataset.
data <- mtcars
# Create a scatterplot with a line of best fit using ggplot2
ggplot(data, aes(x = wt, y = hp)) +    # Map 'wt' to x-axis and 'hp' to y-axis
geom_point(color = "red") +                        # Add red scatterplot points
geom_smooth(method = "lm",                         # Overlay a linear model fit
se = FALSE,                            # Do not display the confidence interval
color = "blue") +                      # Color the best-fit line blue
labs(title = "Scatterplot with Line of Best Fit",  # Set the plot title
x = "Weight",                             # Label for the x-axis
y = "Horsepower")                             # Label for the y-axis
# Load your data. Here, we use R's built-in mtcars dataset.
data <- mtcars
# Create a scatterplot with a line of best fit using ggplot2
ggplot(data, aes(x = wt, y = hp)) +    # Map 'wt' to x-axis and 'hp' to y-axis
geom_point(color = "red") +                        # Add red scatterplot points
geom_smooth(method = "lm",                         # Overlay a linear model fit
se = FALSE,                            # Do not display the confidence interval
color = "blue") +                      # Color the best-fit line blue
labs(title = "Scatterplot with Line of Best Fit",  # Set the plot title
x = "Weight (1000 lbs)",                      # Label for the x-axis
y = "Horsepower")                             # Label for the y-axis
# Create scatterplot with a line of best fit and a 95% confidence interval
ggplot(data, aes(x = wt, y = hp)) +
geom_point(color = "red") +                       # Scatterplot points in red
geom_smooth(method = "lm",                        # Fit a linear model
se = TRUE,                            # Display the confidence interval
level = 0.95,                         # Set the confidence level to 95%
color = "blue") +                     # Color the line of best fit blue
labs(title = "Scatterplot with Line of Best Fit and 95% Confidence Interval",
x = "Weight (1000 lbs)",
y = "Horsepower")
